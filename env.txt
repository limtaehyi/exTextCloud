1. flask
 - 파이썬 기반으로 만드는 웹서버이며 간결한 코드로도 서버를 돌릴수 있다. 
 - django와는 다르게 초기 세팅을 해주는 코드가 없을 뿐더러 기초적인 구현(디렉토리, 파일 자동 생성 및 정의)이 아무것도 안되어있으므로 디렉토리나 파일을 일일이 만들고 설계를 해야한다.
 - 보통 MTV패턴을 채용하고 있다.
2. 라이브러리
 - django와 다르게 기능들을 pip으로 다운로드해서 통합시켜야한다.
 - 세션 : flask_session
 - 폼 : flask_wtf
 - url : blueprint
 - 페이지 다이렉트 : werkzeug
3. 가상화
 - 우분투
 - pip install virtualenv
 - virtualenv myproject
 - source myproject/bin/activate
 - myproject/bin/deactivate
4. 기초 파일
 - __init__.py : view정의, db 설정
 - models.py : 테이블 구조 정의 및 조작
  ㄴ class로 테이블 구조를 정의하고 명령어를 통해 db에 구조 적용
  ㄴ view에서 클래스를 import한후에 쿼리 조작
  ㄴ select : question1 = Question.query.filter_by(user_id=g.user.id).first()
  ㄴ insert : question2 = Question(subject=form.subject.data, content=form.content.data, create_date=datetime.now(), realname=g.user.realname)
               db.session.add(question2)
  ㄴ delete : db.session.delete(question1)
  ㄴ update : question1.user_id += 2
  ㄴ commit : db.session.commit()
 - forms.py : template에서 받아올 form의 내용을 정의
5. wsgi
 - 파이썬은 고질적인 문제인 multi thread를 해결하기 위해 apache2와 연동하는 wsgi를 이용한다.
 - /git/myproject/pybo/pybo.wsgi
import sys
sys.path.insert(0, '/home/lth/git/myproject')
from pybo import create_app()
application = create_app()
 - /etc/apache2/sites-available/000-default.conf 코드 추가
<VirtualHost *:80>
...
<Directory /var/www/html>
  Options Indexes FollowSymLinks MultiViews
  AllowOverride All
  Order allow, deny
  allow from all
</Directory>

WSGIDaemonProcess pybo user=lth threads=5 maximum-requests=10
WSGIScriptAlias /pybo /home/lth/git/myproject/pybo/pybo.wsgi

<Directory /home/lth/git/myproject/pybo>
  WSGIProcessGroup pybo
  WSGIApplicationGroup %{GLOBAL}
  Require all granted
<Directory>
...
<VirtualHost>
6. db 
 - flask db init : db초기 생성
 - flask db migrate : models.py의 변경된 클래스 감지 및 적용 시킬 임시 파일 생성
 - flask db upgrade(downgrade) : 임시파일 적용
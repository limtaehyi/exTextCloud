1. Flask

 설명
 - 파이썬 기반으로 만드는 웹서버이며 간결한 코드로도 백엔드를 구현 할 수 있다. 보통 Model Template View 패턴을 채용하고 있다.
 - django와는 다르게 초기 세팅을 해주는 코드가 없을 뿐더러 기초적인 구현(디렉토리, 파일 자동 생성 및 정의)이 아무것도 안되어있으므로 디렉토리나 파일을 일일이 만들고 설계를 해야한다.

 extextcloud
 - extension text cloud의 약자로 확장프로그램 텍스트 클라우드 서비스 라는 뜻이다. 
 - 접점이 없는 두 컴퓨터에 다른 프로그램 설치 없이 문자를 송수신하거나 공유하는 목적으로 만든 확장프로그램이다. 비밀번호를 설정하여 특정 사람들만 볼 수 있게 설정할 수 있다.
 - 초기 구상에서 기능은 크게 2개인 write, load로 나뉘며 비밀번호 설정, 만료기간시 삭제, 비정상적인 요청 및 횟수를 걸러 낸다.

 DB
 - 테이블은 aaaa부터 ZZZZ까지 저장되어 있는 code 테이블과 문자열을 저장할 text 테이블이 있다.

 Write
 - 첫번째로 문자열, 만료시간, 비밀번호를 클라이언트에게 받는다. 두번째로 code테이블에 있는 값중 아무 값을 선택해서 text 테이블에 문자열, 만료시간, 비밀번호, 랜덤값을 저장하고 code 테이블에 랜덤값을 삭제한다.
 - 이후 아무값을 클라이언트에 알려준다.

 Load
 - 클라이언트가 랜덤값을 불러오기를 누르면 출력해준다. 단 비밀번호가 설정 되어 있으면 확인하고 출력해준다.
 - 만료시간이 지나면 text 테이블에서 해당 컬럼을 삭제하고 랜덤값을 다시 code 테이블에 추가(반환)한다.


2. 요구사항

 DNS
 - aws에서 Route53으로 원하는 도메인을 사놓고 레코드에 서버의 ip들을 넣어 놓는다.

 Requirement
 - apt update
 - apt upgrade
 - apt install python3-virtualenv python3-flask apache2 libapache2-mod-wsgi-py3 tmux sqlalchemy sqlite3 letsencrypt
 - pip install schedule Flask-Migrate flask-cors flask-wtf flask-limiter

  최종 구성 확인 tree
 - 일단 필요한 구성들의 폴더나 파일 위치이다. 중간중간에 계속 확인하고 나중에 끝나고 마지막 확인할 목록들이다.
 - /home/ubuntu/myproejct/bin/ 에 activate
 - /home/ubuntu/myproject/saver/saver.wsgi 에 wsgi
 - /home/ubuntu/saver 에 auto_insert.py, timecheck.py등
 - /home/ubuntu/saver/saver/__init__.py 에 app


3. 가상화
 
 Ubuntu
 - apt install python3-virtualenv
 - cd /home/ubuntu
 - virtualenv myproject
 - source myproject/bin/activate
 - myproject/bin/deactivate


4. 초기 파일

 __init__.py
 - view정의, db 설정
 
 models.py
 - 테이블 구조 정의 및 조작
 - class로 테이블 구조를 정의하고 명령어를 통해 db에 구조 적용
 - view에서 클래스를 import한후에 쿼리 조작
 - select : question1 = Question.query.filter_by(user_id=g.user.id).first()
 - insert : question2 = Question(subject=form.subject.data, content=form.content.data, create_date=datetime.now(), realname=g.user.realname) \ db.session.add(question2)
 - delete : db.session.delete(question1)
 - update : question1.user_id += 2
 - commit : db.session.commit()
 
 forms.py
 - template에서 받아올 form의 내용을 정의를 하지만 이번에는 json으로 통신하기 때문에 사용하지는 않을 예정. 
 - 이유는 원래 csrf_token을 웹을 클라이언트가 페이지를 요청을 먼저하면 그때 웹페이지를 서버가 구성을 하는 도중에 토큰을 주는데 확장 프로그램은 이미 클라이언트가 서버 페이지를 가지고 있어서 토큰을 끼워넣을 타이밍을 못만듬.


5. wsgi

 웹서버
 - 파이썬은 고질적인 문제인 multi thread를 해결하기 위해 apache2와 연동하는 wsgi를 이용한다.
 - /home/ubuntu/myproject/saver/saver.wsgi
import sys
sys.path.insert(0, '/home/ubuntu/saver')
from saver import create_app
application = create_app()

 아파치 등록
 - /etc/apache2/sites-available/000-default.conf는 보안상 사용하지 않는게 좋음. sites-enabled/extextcloud.com-ssl.conf로 파일 새로 제작
 - a2dissite 000-default.conf로 000 비활성화
 - 아래 코드는 wsgi를 연결하고 flask를 사용하겠다는 코드 조각으로서 아파치 어느 설정 파일을 사용하든 필요한 부분.
 - /etc/apache2/sites-enabled/extextcloud.com-ssl.conf 코드 조각

WSGIDaemonProcess saver user=www-data group=www-data threads=5 maximum-requests=100 python-home=/home/ubuntu/myproject
WSGIScriptAlias / /home/ubuntu/myproject/saver/saver.wsgi

<Directory /home/ubuntu/myproject/saver>
  WSGIProcessGroup saver
  WSGIApplicationGroup %{GLOBAL}
  Require all granted
  AllowOverride None
</Directory>


6. db 
 - flask db init : db초기 생성
 - flask db migrate : models.py의 변경된 클래스 감지 및 적용 시킬 임시 파일 생성
 - flask db upgrade(downgrade) : 임시파일 적용


7. HTTPS

 SSL
 - apt install letsencrypt로 ssl 인증서 설정이지만 http로 웹연결이 되어있어야 이 letsencrypt가 확인을 하고 인증서를 써준다.
 - letsencrypt certonly --webroot --webroot-path=/var/www/html -d extextcloud.com
 - VirtualHost는 받을 포트 번호, ServerName은 클라이언트가 요청한 url, RewriteEngine은 리다이렉트 여부, ErrorLog, CustomLog는 로그 작성 파일이다.
 - WSGIScriptAlias에서 첫번째 파라미터는 인덱스 설정하는것이다. 만약 WSGIScriptAlias /abc /home/ubuntu/myproject/saver/saver.wsgi라고 설정했다면 https://www.extextcloud.com/abc 가 index 페이지이다.
 - 최종 /etc/apache2/sites-enabled/extextcloud.com-ssl.conf
<VirtualHost *:80>
    ServerName extextcloud.com
    ServerAlias www.extextcloud.com

    DocumentRoot /var/www/html_empty

    RewriteEngine On
    RewriteRule ^(.*)$ https://%{HTTP_HOST}$1 [R=301,L]

    ErrorLog ${APACHE_LOG_DIR}/http_redirect_error.log
    CustomLog ${APACHE_LOG_DIR}/http_redirect_access.log combined
</VirtualHost>


<VirtualHost *:443>
    ServerName extextcloud.com

    SSLEngine on
    SSLCertificateFile /etc/letsencrypt/live/extextcloud.com/fullchain.pem
    SSLCertificateKeyFile /etc/letsencrypt/live/extextcloud.com/privkey.pem

    DocumentRoot /var/www/html_empty

    RewriteEngine On
    RewriteRule ^(.*)$ https://www.extextcloud.com$1 [R=301,L]

    ErrorLog ${APACHE_LOG_DIR}/https_non_www_redirect_error.log
    CustomLog ${APACHE_LOG_DIR}/https_non_www_redirect_access.log combined
</VirtualHost>


<VirtualHost *:443>
    ServerName www.extextcloud.com

    SSLEngine on
    SSLCertificateFile /etc/letsencrypt/live/www.extextcloud.com/fullchain.pem
    SSLCertificateKeyFile /etc/letsencrypt/live/www.extextcloud.com/privkey.pem

    DocumentRoot /home/ubuntu/myproject/saver/static

    WSGIDaemonProcess saver user=www-data group=www-data threads=5 maximum-requests=1000 python-home=/home/ubuntu/myproject
    WSGIScriptAlias / /home/ubuntu/myproject/saver/saver.wsgi

    <Directory /home/ubuntu/myproject/saver>
        WSGIProcessGroup saver
        WSGIApplicationGroup %{GLOBAL}
        Require all granted
        AllowOverride None
    </Directory>

    ErrorLog ${APACHE_LOG_DIR}/flask_app_error.log
    CustomLog ${APACHE_LOG_DIR}/flask_app_access.log combined
</VirtualHost>


8. 초기 설정, 유지, 보수

 chown, chmod
 - chmod 664 saver.db
 - chown www-data:www-data saver.db
 - chown www-data:www-data /home/ubuntu/myproject/saver
 - chmod 775 /home/ubuntu/myproject/saver

 auto_insert.py
 - saver.db 안에 있는 code 테이블을 aaaa 부터 zzzz 까지 자동으로 넣는 코드이다. db를 만들고 한번만 실행시키면 된다.

 tmux
 - 세션이나 윈도우를 나누어 다른 쉘을 여는 툴이고 tmux를 치면 자동으로 세션을 나눠준다. 
 - ctrl+b d로 빠져 나올 수 있으며 tmux at -t [세션번호] 로 다시 들어 갈 수 있다.
 - tmux를 사용하는 이유는 timecheck.py을 계속 실행하기 위한 것이고, 계속 DB안의 text 테이블에서 시간이 지난 값들을 삭제하고 대여 코드를 반납하는 코드이다.
